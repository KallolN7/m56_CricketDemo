

1. Reverse numbers

Solution: 

private int GetReverseInt(int i)
{
    int reverse = 0, r;

	while(i!=0)
	{
	   r = i%10;
	   reverse = reverse * 10 + r;
	   i/=10;
	}
	return reverse;
}



2. Reverse negative numbers

Solution : Same as 1.

private int GetReverseInt(int i)
{
    int reverse = 0, r;

	while(i!=0)
	{
	   r = i%10;
	   reverse = reverse * 10 + r;
	   i/=10;
	}
	return reverse;
}



3. Reverse number without loops

Solution:

    int reverse = 0, r;
	
    private void reverseMethod(int i)
    {
        r = i % 10;
        reverse = reverse * 10 + r;
        i /= 10;

        if (i > 0)
            reverseMethod(i);

    }
	 
	 
	 

4. Find out the shortest rounds to match two given words. you can change only 1 letter per round. And the word per round has to be a valid word(match with dictionary) 

  Soilution:

  int rounds;

    private int GetLeastStepsToMatchStrings(string inputString, string givenString)
    {

        if (inputString == givenString)
            return rounds;
        if (givenString.Length != inputString.Length)
            return rounds;

        for (int i = 0; i < givenString.Length; i++)
        {
            char CharOfInputString = inputString[i];
            char charOfGivenString = givenString[i];

            if (CharOfInputString != charOfGivenString)
            {
                inputString.Replace(CharOfInputString, GetAppropriateCharFromDictionary(CharOfInputString, inputString));
                rounds++;
            }
        }

        if(inputString != givenString)
        {
            GetLeastStepsToMatchStrings(inputString, givenString);
        }

        return rounds;
    }
	
	
	private char GetAppropriateCharFromDictionary(char CharOfInputString, string inputString)
    {
        //logic to find appropriate letter from dictionary after replacing CharOfInputString of inputString so that the final word results in a valid word
        return ' ';
    }




5. 5 balls. 5 different properties. How to assign those properties to the balls/ball.

Solution:

public enum BallsType
{
Fire,
Ice,
Flubber,
Normal
}

public class Ball 
{
   [Serializefield]
   private particaleSystem particle;

 [Serializefield]
   private physicsMaterial physicsMat;
   
   [Serializefield]
   private BallPropertiesData ballProperties;  //ScriptableObject containg all ball specific data
   

   public void SetBAllType(BallsType ballType)
   {
       particle = ballProperties.GetParticles((int)ballType);
	   physicsMat = ballProperties.GetPhysicsMaterial((int)ballType);
   }
      
}
